---
import AstroIcon from "./icons/AstroIcon.astro";
import JavaScript from "./icons/JavaScript.astro";
import Node from "./icons/Node.astro";
import Tailwind from "./icons/Tailwind.astro";
import Php from "./icons/Php.astro";
import MySQL from "./icons/MySQL.astro";
import Boostrap from "./icons/Boostrap.astro";
import React from "./icons/React.astro";
import Laravel from "./icons/Laravel.astro";
import TypeScript from "./icons/TypeScript.astro";
import Netlify from "./icons/Netlify.astro";
import ArrowRight from "./icons/ArrowRight.astro";

//Transitions
import { fade } from "astro:transitions";

// Mapeo de nombres a componentes
const iconMap = {
  Astro: AstroIcon,
  JavaScript: JavaScript,
  "Node.js": Node,
  Tailwind: Tailwind,
  Php: Php,
  MySQL: MySQL,
  Boostrap: Boostrap,
  React: React,
  Laravel: Laravel,
  TypeScript: TypeScript,
  Netlify: Netlify,
};

// Mapeo de imagenes
const imgMap = {
  "agua-maxima-render-1": "/agua-maxima/agua-maxima-render-1.webp",
  "agua-maxima-render-2": "/agua-maxima/agua-maxima-render-2.webp",
  "agua-maxima-render-3": "/agua-maxima/agua-maxima-render-3.webp",
  "bimo-render-1": "/bimo/bimo-render-1.webp",
  "bimo-render-2": "/bimo/bimo-render-2.webp",
};

// Renderizar datos de la coleccion de astro
import { getCollection } from "astro:content";

const projects = await getCollection("projects");
---

{
  projects.map((project, index) => {
    const { slug, data } = project;
    const { title, description, logo, imgs, link_demo, tecnologias } = data;
    return (
      <div class="col-span-1 py-4">
        <a
          href={`/proyectos/${slug}`}
          class="block w-full bg-transparent rounded-[18px] no-underline relative group hover:border-gray-300 dark:hover:border-[rgba(255,255,255,0.2)] transition-all duration-300 border border-gray-200 dark:border-gray-800 shadow-lg"
        >
          <div class="w-full rounded-[18px] p-8 relative overflow-hidden">
            <div class="max-w-full h-auto bg-gray-100 dark:bg-[#1c1c21] justify-center items-center mb-8 flex border border-gray-200 dark:border-gray-700 shadow-lg rounded-[18px] overflow-hidden hover:shadow-[15px_15px_30px_rgb(25,25,25),-15px_-15px_30px_rgb(60,60,60)] transition-all duration-300">
              <img
                src={imgMap[imgs[0] as keyof typeof imgMap]}
                alt={title}
                class="inline-block rounded-[18px] hover:scale-[1.02] transition-all duration-300"
              />
            </div>
            <h1
              transition:name={`title-${slug}`}
              class="mb-2 text-lg font-medium animate-text-gradient inline-flex bg-gradient-to-r from-gray-900 via-gray-600 to-gray-500 bg-[200%_auto] bg-clip-text leading-tight text-transparent dark:from-[#f5f5f5] dark:via-slate-400 dark:to-neutral-400"
            >
              {title}
            </h1>
            <p class="text-sm mb-4 text-gray-600 dark:text-neutral-400">
              {description}
            </p>
            <div class="flex gap-2 flex-wrap items-center justify-between">
              <div class="flex gap-2 flex-wrap">
                {tecnologias.map((tecnologia: string) => {
                  const IconComponent =
                    iconMap[tecnologia as keyof typeof iconMap];
                  return IconComponent ? (
                    <IconComponent class="size-5 text-gray-500 dark:text-gray-400 hover:scale-110 transition-all duration-300 cursor-pointer" />
                  ) : (
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-xs text-gray-600 dark:text-gray-400 rounded">
                      {tecnologia}
                    </span>
                  );
                })}
              </div>
              <ArrowRight class="size-5 text-gray-400 dark:text-gray-500 group-hover:text-gray-600 dark:group-hover:text-gray-300 group-hover:translate-x-1 transition-all duration-300" />
            </div>
          </div>
        </a>
      </div>
    );
  })
}
