---
import Layout from "../../layouts/Layout.astro";
import ArrowLeft from "../../components/icons/ArrowLeft.astro";
import SocialPill from "../../components/icons/SocialPill.astro";
import SectionContainer from "../../components/SectionContainer.astro";
import AstroIcon from "../../components/icons/AstroIcon.astro";
import JavaScript from "../../components/icons/JavaScript.astro";
import Node from "../../components/icons/Node.astro";
import Tailwind from "../../components/icons/Tailwind.astro";

import MySQL from "../../components/icons/MySQL.astro";
import Bootstrap from "../../components/icons/Bootstrap.astro";
import React from "../../components/icons/React.astro";
import Laravel from "../../components/icons/Laravel.astro";
import TypeScript from "../../components/icons/TypeScript.astro";
import Netlify from "../../components/icons/Netlify.astro";
import ArrowRight from "../../components/icons/ArrowRight.astro";
import Quote from "../../components/icons/Quote.astro";
import Close from "../../components/icons/Close.astro";
import GitHub from "../../components/icons/GitHub.astro";
import Link from "../../components/icons/Link.astro";
import Items from "../../components/icons/Items.astro";
import VerticalLine from "../../components/icons/VerticalLine.astro";

//Transitions
import { fade } from "astro:transitions";

// Mapeo de nombres a componentes
const iconMap = {
  Astro: AstroIcon,
  JavaScript: JavaScript,
  "Node.js": Node,
  Tailwind: Tailwind,
  MySQL: MySQL,
  Bootstrap: Bootstrap,
  React: React,
  Laravel: Laravel,
  TypeScript: TypeScript,
  Netlify: Netlify,
  Items: Items,
};

// Mapeo de imagenes
const imgMap = {
  // Agua Maxima
  "agua-maxima-logo": "/agua-maxima/agua-maxima.webp",
  "agua-maxima-render-1": "/agua-maxima/agua-maxima-render-1.webp",
  "agua-maxima-render-2": "/agua-maxima/agua-maxima-render-2.webp",
  "agua-maxima-render-3": "/agua-maxima/agua-maxima-render-3.webp",

  // Bimo Almacen
  "bimo-logo": "/bimo/bimo-logo.png",
  "bimo-almacen-landing": "/bimo/almacen/bimo-almacen-landing.webp",
  "bimo-almacen-vista-inventarios": "/bimo/almacen/bimo-almacen-vista-inventarios.webp",
  "bimo-almacen-vista-requisiciones": "/bimo/almacen/bimo-almacen-vista-requisiciones.webp",
  "bimo-almacen-vista-movimientos": "/bimo/almacen/bimo-almacen-vista-movimientos.webp",

  // Bimo RH
  "bimo-rh-logo": "/bimo/rh/bimo-rh-logo.png",
  "bimo-rh-render-1": "/bimo/rh/bimo-rh-render-1.webp",
  "bimo-rh-render-2": "/bimo/rh/bimo-rh-render-2.webp",
  "bimo-rh-render-3": "/bimo/rh/bimo-rh-render-3.webp",
};


import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const projects = await getCollection("projects");

  return projects.map((project) => ({
    params: { id: project.slug },
    props: { project },
  }));
}

const { project } = Astro.props;
const { slug, data } = project;
const {
  title,
  description,
  imgs,
  links,
  tecnologias,
  esPersonal,
  approach,
  deliverables,
} = data;

const { Content } = await render(project);
---

<Layout title={`Proyectos - ${title}`} description={description}>
  <div
    id="imageModal"
    class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center"
  >
    <div class="relative max-w-screen-lg max-h-screen-lg p-4">
      <img
        id="modalImage"
        src=""
        alt=""
        class="max-w-full max-h-full object-contain"
      />
      <button
        id="closeModal"
        class="absolute top-5 right-5 text-white text-xl bg-black/50 rounded-full w-8 h-8 flex items-center justify-center hover:bg-opacity-75 transition-all cursor-pointer hover:scale-110 hover:bg-black/75"
      >
        <Close />
      </button>
      <nav class="flex gap-2 mt-4 flex-wrap">
        <a
          class="bg-white/5
         border border-gray-700 rounded-full
         flex justify-center items-center
         py-2 px-4
         text-xs md:text-base
         transition hover:bg-white/10
         group text-[#f5f5f5]"
          href={links.demo}
          target="_blank"
        >
          Ver demo
          <div
            class="w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 *:size-4 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-arrow-right"
              ><path d="M5 12h14"></path><path d="m12 5 7 7-7 7"></path></svg
            >
          </div>
        </a>
        <a
          class="bg-white/5
         border border-gray-700 rounded-full
         flex justify-center items-center
         py-2 px-4
         text-xs md:text-base
         transition hover:bg-white/10
         group text-[#f5f5f5]"
          href={links.github}
          target="_blank"
        >
          Ver código
          <div
            class="w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 *:size-4 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-arrow-right"
              ><path d="M5 12h14"></path><path d="m12 5 7 7-7 7"></path></svg
            >
          </div>
        </a>
      </nav>
    </div>
  </div>

  <SectionContainer class="mx-auto max-w-[800px]">
    {
      esPersonal === true ? (
        <div class="py-12 space-y-4">
            <h2 class="text-gray-500 dark:text-[#F5F5F5] text-sm">
              PROYECTO PERSONAL
            </h2>
          <h1
            transition:name={`title-${slug}`}
            class="animate-text-gradient inline-flex bg-gradient-to-r from-gray-900 via-gray-600 to-gray-500 bg-[200%_auto] bg-clip-text leading-tight text-transparent dark:from-[#f5f5f5] dark:via-slate-400 dark:to-neutral-400 font-medium text-6xl"
          >
            {title}
          </h1>
          <div class="flex gap-x-2">
            {tecnologias.map((tecnologia) => {
              return (
                <span class="dark:text-gray-400">
                  {tecnologia}
                  {tecnologias.indexOf(tecnologia) !== tecnologias.length - 1 &&
                    " ·"}
                </span>
              );
            })}
          </div>
          <div class="relative w-full rounded-2xl overflow-hidden">
            <img
              transition:name={`img-main-${slug}`}
              class="rounded w-full h-auto cursor-zoom-in zoomable-image"
              src={imgMap[imgs.main as keyof typeof imgMap]}
              alt={`${title} - Imagen principal`}
            />
          </div>
          <div class="grid grid-cols-2">
            <h2 class="text-gray-500 dark:text-[#F5F5F5] text-lg font-medium">
              Descripción general
            </h2>
            <div class="prose dark:prose-invert">
              <Content />
            </div>
          </div>
        </div>
      ) : (
        <div class="py-12 space-y-4">
          <h2 class="text-gray-500 dark:text-[#F5F5F5] text-sm">PROYECTO</h2>
          <h1
            transition:name={`title-${slug}`}
            class="animate-text-gradient inline-flex bg-gradient-to-r from-gray-900 via-gray-600 to-gray-500 bg-[200%_auto] bg-clip-text leading-tight text-transparent dark:from-[#f5f5f5] dark:via-slate-400 dark:to-neutral-400 font-medium text-6xl"
          >
            {title}
          </h1>
          <div class="flex gap-x-2">
            {tecnologias.map((tecnologia) => {
              return (
                <span class="dark:text-gray-400">
                  {tecnologia}
                  {tecnologias.indexOf(tecnologia) !== tecnologias.length - 1 &&
                    " ·"}
                </span>
              );
            })}
          </div>
          <div class="relative w-full rounded-2xl overflow-hidden">
            <img
              transition:name={`img-main-${slug}`}
              class="rounded w-full h-auto cursor-zoom-in zoomable-image"
              src={imgMap[imgs.main as keyof typeof imgMap]}
              alt={`${title} - Imagen principal`}
            />
          </div>
          <div class="grid grid-cols-2 gap-y-14">
            <h2 class="text-gray-500 dark:text-[#F5F5F5] text-lg font-medium">
              Descripción general
            </h2>
            <div class="prose dark:prose-invert">
              <Content />
            </div>
            <h2 class="text-gray-500 dark:text-[#F5F5F5] text-lg font-medium">
              Acercamiento con la empresa
            </h2>
            <div class="prose dark:prose-invert">{approach}</div>
            <h2 class="text-gray-500 dark:text-[#F5F5F5] text-lg font-medium">
              Entregables
            </h2>
            <div class="grid grid-cols-2 gap-y-14 col-span-full">
              {deliverables?.map((deliverable) => {
                return (
                  <div class="relative w-full rounded-2xl overflow-hidden col-span-full custom-gradient-bg group cursor-pointer transition-all duration-300 hover:shadow-[inset_0_0_50px_rgba(0,0,0,0.3)]">
                    {deliverable.img && (
                      <div class="relative flex flex-col gap-4 px-6 pb-2 pt-6 md:gap-2 md:px-8 md:pb-4 md:pt-8">
                      <h1 class="text-gray-500 dark:text-[#F5F5F5] text-3xl font-light ">
                        {deliverable.title}
                      </h1>
                      <p class="text-center text-sm font-medium text-white md:text-justify">{deliverable.description}</p>
                    </div>
                      <img
                        class="w-full h-auto zoomable-image px-20 translate-y-[10px] group-hover:translate-y-[0px] transition-all duration-300 rounded-xl"
                        src={imgMap[deliverable.img as keyof typeof imgMap]}
                        alt={`${title} - Imagen ${deliverable.title}`}
                      />
                    )}
                  </div>
                  <div class="col-span-full grid grid-cols-1 md:grid-cols-3 gap-4">
                    {deliverable.metrics?.map((metric) => {
                      return (
                        <div class="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4 text-center">
                          <div class="text-2xl font-bold text-gray-900 dark:text-[#F5F5F5]">
                            {metric.value}
                          </div>
                          <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                            {metric.label}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )
    }
  </SectionContainer>
</Layout>
<script>
  function initImageZoom() {
    const modal = document.getElementById("imageModal") as HTMLElement;
    const modalImage = document.getElementById(
      "modalImage"
    ) as HTMLImageElement;
    const closeBtn = document.getElementById("closeModal") as HTMLElement;
    const zoomableImages = document.querySelectorAll(".zoomable-image");

    if (!modal || !modalImage || !closeBtn) return;

    zoomableImages.forEach((image) => {
      const imgElement = image as HTMLImageElement;

      imgElement.addEventListener("click", () => {
        modalImage.src = imgElement.src;
        modalImage.alt = imgElement.alt;
        modal.style.opacity = "1";
        modal.style.transform = "scale(1.05)";
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document.body.style.overflow = "hidden";
      });
    });

    closeBtn.addEventListener("click", () => {
      closeModal();
    });

    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !modal.classList.contains("hidden")) {
        closeModal();
      }
    });

    function closeModal() {
      modal.classList.add("hidden");
      modal.classList.remove("flex");
      document.body.style.overflow = "auto";
    }
  }

  document.addEventListener("DOMContentLoaded", initImageZoom);

  document.addEventListener("astro:page-load", initImageZoom);
</script>

<style>
  #imageModal {
    backdrop-filter: blur(5px);
  }

  #modalImage {
    border-radius: 1rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .custom-gradient-bg {
    background-image: linear-gradient(to right top, #121212, #1c1f25, #1e2d39, #163d4c, #004e59);
  }
</style>
